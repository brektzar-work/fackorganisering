import streamlit as st
import pandas as pd
import plotly.express as px
import folium
from streamlit_folium import folium_static
import json
import colorsys


# Flytta generate_distinct_colors till modulniv√•
def generate_distinct_colors(n):
    colors = []
    for i in range(n):
        hue = i / n
        # Anv√§nd ljusa, transparenta f√§rger
        rgb = colorsys.hsv_to_rgb(hue, 0.3, 0.9)
        hex_color = '#{:02x}{:02x}{:02x}'.format(
            int(rgb[0] * 255),
            int(rgb[1] * 255),
            int(rgb[2] * 255)
        )
        colors.append(hex_color)
    return colors


# StyleFunction-klassen √§r redan p√• modulniv√•
class StyleFunction:
    def __init__(self, color):
        self.color = color

    def __call__(self, feature):
        return {
            'fillColor': self.color,
            'fillOpacity': 0.3,
            'color': 'gray',
            'weight': 1,
            'dashArray': '5, 5'
        }

    def __getstate__(self):
        return {'color': self.color}

    def __setstate__(self, state):
        self.color = state['color']


@st.cache_data(ttl=3600)  # Cache i 1 timme
def load_map(_arbetsplatser, _personer, _db):
    # Skapa en karta centrerad √∂ver V√§stra G√∂taland med begr√§nsningar
    m = folium.Map(
        location=[58.2, 13.0],  # Centrerad √∂ver VGR
        zoom_start=8,
        min_zoom=7,  # F√∂rhindra f√∂r mycket utzoomning
        max_zoom=13,  # Begr√§nsa max inzoomning
        max_bounds=True,  # Aktivera gr√§nser
        min_lat=57.15,  # S√∂dra gr√§nsen f√∂r VGR
        max_lat=59.0,  # Norra gr√§nsen f√∂r VGR
        min_lon=11.0,  # V√§stra gr√§nsen f√∂r VGR
        max_lon=14.5,  # √ñstra gr√§nsen f√∂r VGR
        attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
    )

    # S√§tt gr√§nser f√∂r panorering
    m.fit_bounds([[57.15, 11.0], [59.0, 14.5]])

    # L√§gg till kommungr√§nser som ett eget lager med clipping
    kommun_layer = folium.FeatureGroup(name="üèõÔ∏è Kommuner")

    # Lista √∂ver kommuner i V√§stra G√∂taland (med alla vanliga namnvarianter)
    vg_kommuner_namn = [
        # Standard med 's'
        'Ale kommun', 'Alings√•s kommun', 'Bengtsfors kommun', 'Bollebygds kommun', 'Bor√•s kommun',
        'Dals-Eds kommun', 'Essunga kommun', 'Falk√∂pings kommun', 'F√§rgelanda kommun', 'Gr√§storps kommun',
        'Gullsp√•ngs kommun', 'G√∂teborgs kommun', 'G√∂tene kommun', 'Herrljunga kommun', 'Hjo kommun',
        'H√§rryda kommun', 'Karlsborgs kommun', 'Kung√§lvs kommun', 'Lerums kommun', 'Lidk√∂pings kommun',
        'Lilla Edets kommun', 'Lysekils kommun', 'Mariestads kommun', 'Marks kommun', 'Melleruds kommun',
        'Munkedals kommun', 'M√∂lndals kommun', 'Orusts kommun', 'Partille kommun', 'Skara kommun',
        'Sk√∂vde kommun', 'Soten√§s kommun', 'Stenungsunds kommun', 'Str√∂mstads kommun', 'Svenljunga kommun',
        'Tanums kommun', 'Tibro kommun', 'Tidaholms kommun', 'Tj√∂rns kommun', 'Tranemo kommun',
        'Trollh√§ttans kommun', 'T√∂reboda kommun', 'Uddevalla kommun', 'Ulricehamns kommun', 'Vara kommun',
        'V√•rg√•rda kommun', 'V√§nersborgs kommun', '√Öm√•ls kommun', '√ñcker√∂ kommun',
        # Utan 's'
        'Ale kommun', 'Alings√•s kommun', 'Bengtsfors kommun', 'Bollebygd kommun', 'Bor√•s kommun',
        'Dals-Ed kommun', 'Essunga kommun', 'Falk√∂ping kommun', 'F√§rgelanda kommun', 'Gr√§storp kommun',
        'Gullsp√•ng kommun', 'G√∂teborg kommun', 'G√∂tene kommun', 'Herrljunga kommun', 'Hjo kommun',
        'H√§rryda kommun', 'Karlsborg kommun', 'Kung√§lv kommun', 'Lerum kommun', 'Lidk√∂ping kommun',
        'Lilla Edet kommun', 'Lysekil kommun', 'Mariestad kommun', 'Mark kommun', 'Mellerud kommun',
        'Munkedal kommun', 'M√∂lndal kommun', 'Orust kommun', 'Partille kommun', 'Skara kommun',
        'Sk√∂vde kommun', 'Soten√§s kommun', 'Stenungsund kommun', 'Str√∂mstad kommun', 'Svenljunga kommun',
        'Tanum kommun', 'Tibro kommun', 'Tidaholm kommun', 'Tj√∂rn kommun', 'Tranemo kommun',
        'Trollh√§ttan kommun', 'T√∂reboda kommun', 'Uddevalla kommun', 'Ulricehamn kommun', 'Vara kommun',
        'V√•rg√•rda kommun', 'V√§nersborg kommun', '√Öm√•l kommun', '√ñcker√∂ kommun',
        # Specialfall
        'G√∂teborgs stad', 'G√∂teborg stad', 'Bor√•s stad', 'Trollh√§ttans stad', 'V√§nersborgs stad',
        'Sk√∂vde stad', 'Lidk√∂pings stad', 'M√∂lndals stad', 'Alings√•s stad', 'Uddevalla stad'
    ]

    try:
        # L√§s in GeoJSON-data
        with open('data/kommuner.geo.json', 'r', encoding='utf-8') as f:
            alla_kommuner = json.load(f)

        # Filtrera VG-kommuner
        vg_features = []
        for kommun in alla_kommuner:
            if isinstance(kommun, dict) and 'geometry' in kommun:
                namn = kommun.get('namn')
                if namn in vg_kommuner_namn:
                    vg_features.append({
                        "type": "Feature",
                        "properties": {
                            "name": namn,
                            "original": kommun
                        },
                        "geometry": kommun['geometry']
                    })

        # Generera f√§rger och l√§gg till p√• kartan
        colors = generate_distinct_colors(len(vg_features))

        for feature, color in zip(vg_features, colors):
            kommun_namn = feature['properties']['name']
            style_function = StyleFunction(color)

            geojson = folium.GeoJson(
                feature,  # Anv√§nd hela feature-objektet direkt
                name=kommun_namn,
                style_function=style_function,
                tooltip=kommun_namn
            )
            geojson.add_to(kommun_layer)

    except Exception as e:
        st.error(f"Fel vid hantering av kommundata: {str(e)}")
        import traceback
        st.write("Detaljerat fel:", traceback.format_exc())

    kommun_layer.add_to(m)

    # Skapa feature groups f√∂r olika typer av mark√∂rer
    layers = {
        'visionombud': folium.FeatureGroup(name="üëÅÔ∏è Visionombud"),
        'skyddsombud': folium.FeatureGroup(name="üõ°Ô∏è Skyddsombud")
    }

    # L√§gg till alla lager till kartan direkt
    for layer in layers.values():
        m.add_child(layer)

    # Lista f√∂r misslyckade platser
    failed_locations = []

    for arbetsplats in _arbetsplatser:
        try:
            if not arbetsplats.get("coordinates"):
                failed_locations.append(f"{arbetsplats.get('namn', 'Ok√§nd arbetsplats')} - Saknar koordinater")
                continue

            location_data = {
                "latitude": arbetsplats["coordinates"]["lat"],
                "longitude": arbetsplats["coordinates"]["lng"]
            }

            har_visionombud = any(
                p.get('visionombud') and arbetsplats['namn'] in p.get('arbetsplats', [])
                for p in _personer
            )

            har_skyddsombud = any(
                p.get('skyddsombud') and arbetsplats['namn'] in p.get('arbetsplats', [])
                for p in _personer
            )

            # Hitta alla ombud f√∂r denna arbetsplats med deras f√∂rvaltningar
            visionombud_list = [f"{p.get('namn', '')} ({p.get('forvaltning_namn', '')})"
                                for p in _personer
                                if p.get('visionombud') and arbetsplats['namn'] in p.get('arbetsplats', [])]

            skyddsombud_list = [f"{p.get('namn', '')} ({p.get('forvaltning_namn', '')})"
                                for p in _personer
                                if p.get('skyddsombud') and arbetsplats['namn'] in p.get('arbetsplats', [])]

            # Skapa baskoordinater och popup-text med bredare stil
            location = [location_data["latitude"], location_data["longitude"]]

            # Formatera popup-text med namn p√• ombuden och bredare stil
            visionombud_text = "<br>".join(visionombud_list) if visionombud_list else "Saknar Visionombud"
            skyddsombud_text = "<br>".join(skyddsombud_list) if skyddsombud_list else "Saknar Skyddsombud"

            popup_text = f"""
                <div style="min-width: 300px; max-width: 500px; white-space: nowrap;">
                    <h4 style="margin-bottom: 10px;">{arbetsplats['namn']}</h4>
                    <div style="margin-bottom: 15px;">
                        <strong>Visionombud:</strong><br>
                        {visionombud_text}
                    </div>
                    <div>
                        <strong>Skyddsombud:</strong><br>
                        {skyddsombud_text}
                    </div>
                </div>
            """

            # Uppdatera tooltip-texter ocks√•
            vision_tooltip = "Visionombud: " + (", ".join(visionombud_list) if visionombud_list else "Saknas")
            skydd_tooltip = "Skyddsombud: " + (", ".join(skyddsombud_list) if skyddsombud_list else "Saknas")

            # Skapa HTML f√∂r skyddsombud-mark√∂ren
            check_html = f"""
                <div style="
                    font-family: Arial; 
                    font-size: 18px; 
                    color: {'green' if har_skyddsombud else 'red'};
                    text-shadow: 
                        -1px -1px 0 white,
                        1px -1px 0 white,
                        -1px 1px 0 white,
                        1px 1px 0 white;
                    font-weight: bold;
                ">
                    {'‚úì' if har_skyddsombud else '‚úï'}
                </div>
            """

            # L√§gg till cirkelmark√∂r f√∂r Visionombud
            folium.CircleMarker(
                location=location,
                radius=8,
                popup=folium.Popup(popup_text, max_width=500),  # Anv√§nd Popup-objekt f√∂r b√§ttre kontroll
                tooltip=vision_tooltip,
                color='green' if har_visionombud else 'red',
                fill=True
            ).add_to(layers['visionombud'])

            # L√§gg till bock/kryss f√∂r Skyddsombud
            folium.Marker(
                location=[location[0] + 0.0003, location[1]],
                popup=folium.Popup(popup_text, max_width=500),  # Samma popup h√§r
                tooltip=skydd_tooltip,
                icon=folium.DivIcon(
                    html=check_html,
                    icon_size=(20, 20),
                    icon_anchor=(10, 10)
                )
            ).add_to(layers['skyddsombud'])

        except Exception as e:
            failed_locations.append(f"{arbetsplats.get('namn', 'ok√§nd arbetsplats')} - {str(e)}")
            continue

    # L√§gg till lager-kontroll
    folium.LayerControl(
        position='topright',
        collapsed=False,
        autoZIndex=True
    ).add_to(m)

    return m, failed_locations


def show(db):
    st.header("Statistik")

    # H√§mta all data
    personer = list(db.personer.find())
    forvaltningar = list(db.forvaltningar.find())

    # Skapa DataFrame f√∂r enklare analys
    df = pd.DataFrame(personer)

    # Skapa flikar f√∂r olika typer av statistik
    tab1, tab2, tab3 = st.tabs([
        "üìä Grundl√§ggande statistik",
        "üìà Detaljerade grafer",
        "üó∫Ô∏è T√§ckningskarta"
    ])

    with tab1:
        # Visa √∂vergripande statistik
        col1, col2, col3 = st.columns(3)

        with col1:
            st.metric("Totalt antal med uppdrag", len(personer))

        with col2:
            antal_visionombud = len([p for p in personer if p.get('visionombud')])
            st.metric("Antal Visionombud", antal_visionombud)

        with col3:
            antal_skyddsombud = len([p for p in personer if p.get('skyddsombud')])
            st.metric("Antal Skyddsombud", antal_skyddsombud)

        # F√∂rdelning per f√∂rvaltning
        st.subheader("F√∂rdelning per f√∂rvaltning")

        forv_stats = df.groupby('forvaltning_namn').agg({
            '_id': 'count',
            'visionombud': 'sum',
            'skyddsombud': 'sum',
            'huvudskyddsombud': 'sum',
            'csg': 'sum',
            'lsg_fsg': 'sum'
        }).reset_index()

        forv_stats.columns = ['F√∂rvaltning', 'Totalt', 'Visionombud', 'Skyddsombud',
                              'Huvudskyddsombud', 'CSG', 'LSG/FSG']

        # Skapa stapeldiagram
        fig = px.bar(forv_stats.melt(id_vars=['F√∂rvaltning'],
                                     value_vars=['Visionombud', 'Skyddsombud', 'CSG', 'LSG/FSG']),
                     x='F√∂rvaltning',
                     y='value',
                     color='variable',
                     title='Uppdrag per f√∂rvaltning',
                     labels={'value': 'Antal', 'variable': 'Uppdrag'})

        st.plotly_chart(fig, use_container_width=True)

        # Visa detaljerad statistik
        with st.expander("Visa detaljerad statistik"):
            # L√§gg till totalsumma
            total_row = pd.DataFrame({
                'F√∂rvaltning': ['Totalt'],
                'Totalt': [forv_stats['Totalt'].sum()],
                'Visionombud': [forv_stats['Visionombud'].sum()],
                'Skyddsombud': [forv_stats['Skyddsombud'].sum()],
                'Huvudskyddsombud': [forv_stats['Huvudskyddsombud'].sum()],
                'CSG': [forv_stats['CSG'].sum()],
                'LSG/FSG': [forv_stats['LSG/FSG'].sum()]
            })

            # L√§gg till total-raden
            forv_stats = pd.concat([forv_stats, total_row], ignore_index=True)

            # Visa statistik utan styling
            st.dataframe(forv_stats)

        # T√§ckningsgrad
        st.subheader("T√§ckningsgrad")

        # Ber√§kna antal enheter och enheter med ombud
        enheter = list(db.enheter.find())
        antal_enheter = len(enheter)

        enheter_med_visionombud = len(set(p['enhet_id'] for p in personer if p.get('visionombud')))
        enheter_med_skyddsombud = len(set(p['enhet_id'] for p in personer if p.get('skyddsombud')))

        col1, col2 = st.columns(2)

        with col1:
            visionombud_tack = (enheter_med_visionombud / antal_enheter) * 100 if antal_enheter > 0 else 0
            st.metric("T√§ckningsgrad Visionombud", f"{visionombud_tack:.1f}%")

        with col2:
            skyddsombud_tack = (enheter_med_skyddsombud / antal_enheter) * 100 if antal_enheter > 0 else 0
            st.metric("T√§ckningsgrad Skyddsombud", f"{skyddsombud_tack:.1f}%")

    with tab2:
        st.subheader("Detaljerade analyser")

        # Graf 1: T√§ckningsgrad per f√∂rvaltning
        st.markdown("### T√§ckningsgrad per f√∂rvaltning")

        # Debug information
        st.write(f"Antal f√∂rvaltningar: {len(forvaltningar)}")

        # Kontrollera alla enheter f√∂rst
        alla_enheter = list(db.enheter.find())
        st.write(f"Totalt antal enheter i databasen: {len(alla_enheter)}")

        # Visa n√•gra exempel p√• enheter f√∂r att se strukturen
        if alla_enheter:
            st.write("Exempel p√• en enhet:", alla_enheter[0])

        # Ber√§kna t√§ckningsgrad per f√∂rvaltning
        forv_coverage = []
        for forv in forvaltningar:
            st.write(f"\nDebugging f√∂rvaltning: {forv['namn']}")
            st.write(f"F√∂rvaltning ID: {forv['_id']}")

            # Visa alla enheter f√∂r denna f√∂rvaltning
            enheter = list(db.enheter.find({"forvaltning_namn": forv["namn"]}))
            st.write("F√∂rsta enheten (om den finns):", enheter[0] if enheter else "Inga enheter hittades")

            forv_enheter = len(enheter)
            st.write(f"F√∂rvaltning: {forv['namn']}, Antal enheter: {forv_enheter}")

            if forv_enheter > 0:
                vision_coverage = len(set(
                    p['enhet_id'] for p in personer
                    if p.get('visionombud') and p['forvaltning_namn'] == forv["namn"]
                )) / forv_enheter * 100

                skydd_coverage = len(set(
                    p['enhet_id'] for p in personer
                    if p.get('skyddsombud') and p['forvaltning_namn'] == forv["namn"]
                )) / forv_enheter * 100

                st.write(f"Vision t√§ckning: {vision_coverage:.1f}%, Skydd t√§ckning: {skydd_coverage:.1f}%")

                forv_coverage.append({
                    'F√∂rvaltning': forv['namn'],
                    'Visionombud': vision_coverage,
                    'Skyddsombud': skydd_coverage
                })

        if forv_coverage:  # Kontrollera att vi har data
            coverage_df = pd.DataFrame(forv_coverage)
            melted_df = coverage_df.melt(
                id_vars='F√∂rvaltning',  # √Ñndrat fr√•n lista till str√§ng
                value_vars=['Visionombud', 'Skyddsombud'],
                var_name='Typ',
                value_name='T√§ckningsgrad'
            )

            fig_coverage = px.bar(
                melted_df,
                x='F√∂rvaltning',
                y='T√§ckningsgrad',
                color='Typ',
                title='T√§ckningsgrad av ombud per f√∂rvaltning',
                labels={'T√§ckningsgrad': 'T√§ckningsgrad (%)'})
            st.plotly_chart(fig_coverage, use_container_width=True)
        else:
            st.warning("Ingen data tillg√§nglig f√∂r t√§ckningsgrad per f√∂rvaltning")

        # Graf 2: F√∂rdelning av roller
        st.markdown("### F√∂rdelning av roller")
        role_counts = {
            'Visionombud': len([p for p in personer if p.get('visionombud')]),
            'Skyddsombud': len([p for p in personer if p.get('skyddsombud')]),
            'Huvudskyddsombud': len([p for p in personer if p.get('huvudskyddsombud')]),
            'CSG': len([p for p in personer if p.get('csg')]),
            'LSG/FSG': len([p for p in personer if p.get('lsg_fsg')]),
            'Annat fack': len([p for p in personer if p.get('annat_fack')])
        }

        fig_roles = px.pie(
            values=list(role_counts.values()),
            names=list(role_counts.keys()),
            title='F√∂rdelning av roller')
        st.plotly_chart(fig_roles, use_container_width=True)

        # Graf 3: Ordinarie vs Ers√§ttare
        st.markdown("### Ordinarie vs Ers√§ttare")

        csg_stats = {
            'Ordinarie': len([p for p in personer if p.get('csg') and p.get('csg_roll') == 'Ordinarie']),
            'Ers√§ttare': len([p for p in personer if p.get('csg') and p.get('csg_roll') == 'Ers√§ttare'])
        }

        lsg_stats = {
            'Ordinarie': len([p for p in personer if p.get('lsg_fsg') and p.get('lsg_fsg_roll') == 'Ordinarie']),
            'Ers√§ttare': len([p for p in personer if p.get('lsg_fsg') and p.get('lsg_fsg_roll') == 'Ers√§ttare'])
        }

        representation_data = pd.DataFrame({
            'Grupp': ['CSG', 'CSG', 'LSG/FSG', 'LSG/FSG'],
            'Roll': ['Ordinarie', 'Ers√§ttare', 'Ordinarie', 'Ers√§ttare'],
            'Antal': [csg_stats['Ordinarie'], csg_stats['Ers√§ttare'],
                      lsg_stats['Ordinarie'], lsg_stats['Ers√§ttare']]
        })

        fig_repr = px.bar(
            representation_data,
            x='Grupp',
            y='Antal',
            color='Roll',
            barmode='group',
            title='F√∂rdelning Ordinarie/Ers√§ttare i grupper')
        st.plotly_chart(fig_repr, use_container_width=True)

        # Graf 4: Antal personer per avdelning inom varje f√∂rvaltning
        st.markdown("### Personer per avdelning")

        dept_counts = df.groupby(['forvaltning_namn', 'avdelning_namn']).size().reset_index(name='Antal')
        fig_dept = px.bar(
            dept_counts,
            x='forvaltning_namn',
            y='Antal',
            color='avdelning_namn',
            title='Antal personer per avdelning inom f√∂rvaltningar',
            labels={'forvaltning_namn': 'F√∂rvaltning', 'avdelning_namn': 'Avdelning'})
        st.plotly_chart(fig_dept, use_container_width=True)

    with tab3:
        st.subheader("Geografisk t√§ckning av Visionombud")

        # H√§mta alla arbetsplatser
        arbetsplatser = list(db.arbetsplatser.find())

        # Knapp f√∂r att uppdatera kartan
        if st.button("üîÑ Uppdatera karta och geocoda saknade adresser", key="update_map"):
            # Rensa cache f√∂r att tvinga omr√§kning
            load_map.clear()
            st.session_state.map_loaded = True
            st.rerun()

        # Ladda och visa kartan
        if st.session_state.get('map_loaded', False):
            with st.spinner('Laddar karta...'):
                m, failed_locations = load_map(arbetsplatser, personer, db)

                # Visa f√∂rklaring f√∂rst
                st.markdown("""
                ### F√∂rklaring
                Anv√§nd kontrollerna i √∂vre h√∂gra h√∂rnet av kartan f√∂r att visa/d√∂lja:
                
                - üèõÔ∏è Kommuner
                  - F√§rgade omr√•den visar kommungr√§nser
                - üëÅÔ∏è Visionombud
                  - üü¢ Gr√∂n cirkel: Har Visionombud
                  - üî¥ R√∂d cirkel: Saknar Visionombud
                - üõ°Ô∏è Skyddsombud
                  - ‚úì Gr√∂n bock: Har Skyddsombud
                  - ‚úï R√∂tt kryss: Saknar Skyddsombud
                """)

                # Sedan visa kartan
                st.markdown("""
                    <style>
                        iframe {
                            width: 1200px;
                            height: 800px;
                            margin: auto;
                            display: block;
                        }
                    </style>
                """, unsafe_allow_html=True)
                folium_static(m)

                # Visa eventuella fel
                if failed_locations:
                    with st.expander("‚ö†Ô∏è Visa problem med geokodning"):
                        st.write("F√∂ljande platser kunde inte visas p√• kartan:")
                        for loc in failed_locations:
                            st.write(f"- {loc}")
        else:
            st.info("üëÜ Klicka p√• 'Uppdatera karta' f√∂r att ladda kartan")
