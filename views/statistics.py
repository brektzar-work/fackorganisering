"""
Statistikmodul f√∂r Vision Sektion 10.

Detta system hanterar avancerad statistik och visualisering av organisationsdata:
1. Grundl√§ggande statistik
   - Totalt antal personer med uppdrag
   - F√∂rdelning av olika uppdragstyper
   - T√§ckningsgrad f√∂r ombud

2. Detaljerade analyser
   - F√∂rdelning per f√∂rvaltning
   - Interaktiva grafer och diagram
   - Trendanalyser och j√§mf√∂relser

3. Geografisk visualisering
   - T√§ckningskarta med arbetsplatser
   - Visualisering av ombud och representation
   - Kommungr√§nser och regional indelning

4. Medlemsstatistik
   - F√∂rdelning av medlemmar
   - Analys av representation
   - Demografiska √∂versikter

Tekniska detaljer:
- Anv√§nder Plotly f√∂r interaktiva visualiseringar
- Implementerar Folium f√∂r kartfunktionalitet
- Hanterar komplex databearbetning med Pandas
- Tillhandah√•ller cachning f√∂r optimerad prestanda
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import folium
from streamlit_folium import folium_static
import json
import colorsys
from collections import defaultdict
from bson import ObjectId


def generate_distinct_colors(n):
    """Genererar en upps√§ttning visuellt distinkta f√§rger.
    
    Funktionen skapar f√§rger med j√§mn f√∂rdelning i f√§rghjulet f√∂r optimal
    visuell separation mellan n√§rliggande f√§rger. Anv√§nder HSV-f√§rgrymd
    f√∂r b√§ttre kontroll √∂ver f√§rgm√§ttnad och ljusstyrka.
    
    Args:
        n (int): Antal f√§rger att generera
    
    Returns:
        list: Lista med hex-f√§rgkoder
    
    Tekniska detaljer:
    - Anv√§nder HSV-f√§rgrymd f√∂r b√§ttre f√§rgkontroll
    - Implementerar transparens f√∂r b√§ttre visualisering
    - Konverterar till hex-format f√∂r webbkompatibilitet
    """
    colors = []
    for i in range(n):
        hue = i / n
        # Anv√§nd ljusa, transparenta f√§rger f√∂r b√§ttre visualisering
        rgb = colorsys.hsv_to_rgb(hue, 0.3, 0.9)
        hex_color = '#{:02x}{:02x}{:02x}'.format(
            int(rgb[0] * 255),
            int(rgb[1] * 255),
            int(rgb[2] * 255)
        )
        colors.append(hex_color)
    return colors


class StyleFunction:
    """Hanterar stils√§ttning f√∂r geografiska element p√• kartan.
    
    Denna klass definierar utseendet f√∂r geografiska omr√•den som
    kommuner och regioner p√• kartan. Den implementerar en callable
    interface f√∂r anv√§ndning med Folium's style_function.
    
    Attribut:
        color (str): Hex-f√§rgkod f√∂r omr√•det
    
    Tekniska detaljer:
    - Implementerar __call__ f√∂r anv√§ndning som callback
    - Hanterar serialisering f√∂r cachning
    - Definierar standardv√§rden f√∂r kartvisualisering
    """
    def __init__(self, color):
        self.color = color

    def __call__(self, feature):
        """Returnerar stilattribut f√∂r ett geografiskt element.
        
        Args:
            feature: GeoJSON-feature som ska stils√§ttas
        
        Returns:
            dict: Stilattribut f√∂r elementet
        """
        return {
            'fillColor': self.color,
            'fillOpacity': 0.3,
            'color': 'gray',
            'weight': 1,
            'dashArray': '5, 5'
        }

    def __getstate__(self):
        """Serialiserar objektet f√∂r cachning."""
        return {'color': self.color}

    def __setstate__(self, state):
        """√Öterst√§ller objektet fr√•n cachad data."""
        self.color = state['color']


@st.cache_data(ttl=3600)  # Cache i 1 timme
def load_map(_arbetsplatser, _personer, _db):
    # Skapa en karta centrerad √∂ver V√§stra G√∂taland med begr√§nsningar
    m = folium.Map(
        location=[58.2, 13.0],  # Centrerad √∂ver VGR
        zoom_start=8,
        min_zoom=7,  # F√∂rhindra f√∂r mycket utzoomning
        max_zoom=18,  # √ñkat fr√•n 13 till 18 f√∂r att till√•ta n√§rmare inzoomning
        max_bounds=True,  # Aktivera gr√§nser
        min_lat=56.0,  # S√∂dra gr√§nsen
        max_lat=60.0,  # Norra gr√§nsen
        min_lon=10.0,  # V√§stra gr√§nsen
        max_lon=15.5,  # √ñstra gr√§nsen
        attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
    )

    # S√§tt gr√§nser f√∂r panorering
    m.fit_bounds([[56.0, 10.0], [60.0, 15.5]])  # Uppdatera ocks√• fit_bounds

    # L√§gg till kommungr√§nser som ett eget lager med clipping
    kommun_layer = folium.FeatureGroup(name="üèõÔ∏è Kommuner")

    # Lista √∂ver kommuner i V√§stra G√∂taland (med alla vanliga namnvarianter)
    vg_kommuner_namn = [
        # Standard med 's'
        'Ale kommun', 'Alings√•s kommun', 'Bengtsfors kommun', 'Bollebygds kommun', 'Bor√•s kommun',
        'Dals-Eds kommun', 'Essunga kommun', 'Falk√∂pings kommun', 'F√§rgelanda kommun', 'Gr√§storps kommun',
        'Gullsp√•ngs kommun', 'G√∂teborgs kommun', 'G√∂tene kommun', 'Herrljunga kommun', 'Hjo kommun',
        'H√§rryda kommun', 'Karlsborgs kommun', 'Kung√§lvs kommun', 'Lerums kommun', 'Lidk√∂pings kommun',
        'Lilla Edets kommun', 'Lysekils kommun', 'Mariestads kommun', 'Marks kommun', 'Melleruds kommun',
        'Munkedals kommun', 'M√∂lndals kommun', 'Orusts kommun', 'Partille kommun', 'Skara kommun',
        'Sk√∂vde kommun', 'Soten√§s kommun', 'Stenungsunds kommun', 'Str√∂mstads kommun', 'Svenljunga kommun',
        'Tanums kommun', 'Tibro kommun', 'Tidaholms kommun', 'Tj√∂rns kommun', 'Tranemo kommun',
        'Trollh√§ttans kommun', 'T√∂reboda kommun', 'Uddevalla kommun', 'Ulricehamns kommun', 'Vara kommun',
        'V√•rg√•rda kommun', 'V√§nersborgs kommun', '√Öm√•ls kommun', '√ñcker√∂ kommun',
        # Utan 's'
        'Ale kommun', 'Alings√•s kommun', 'Bengtsfors kommun', 'Bollebygd kommun', 'Bor√•s kommun',
        'Dals-Ed kommun', 'Essunga kommun', 'Falk√∂ping kommun', 'F√§rgelanda kommun', 'Gr√§storp kommun',
        'Gullsp√•ng kommun', 'G√∂teborg kommun', 'G√∂tene kommun', 'Herrljunga kommun', 'Hjo kommun',
        'H√§rryda kommun', 'Karlsborg kommun', 'Kung√§lv kommun', 'Lerum kommun', 'Lidk√∂ping kommun',
        'Lilla Edet kommun', 'Lysekil kommun', 'Mariestad kommun', 'Mark kommun', 'Mellerud kommun',
        'Munkedal kommun', 'M√∂lndal kommun', 'Orust kommun', 'Partille kommun', 'Skara kommun',
        'Sk√∂vde kommun', 'Soten√§s kommun', 'Stenungsund kommun', 'Str√∂mstad kommun', 'Svenljunga kommun',
        'Tanum kommun', 'Tibro kommun', 'Tidaholm kommun', 'Tj√∂rn kommun', 'Tranemo kommun',
        'Trollh√§ttan kommun', 'T√∂reboda kommun', 'Uddevalla kommun', 'Ulricehamn kommun', 'Vara kommun',
        'V√•rg√•rda kommun', 'V√§nersborg kommun', '√Öm√•l kommun', '√ñcker√∂ kommun',
        # Specialfall
        'G√∂teborgs stad', 'G√∂teborg stad', 'Bor√•s stad', 'Trollh√§ttans stad', 'V√§nersborgs stad',
        'Sk√∂vde stad', 'Lidk√∂pings stad', 'M√∂lndals stad', 'Alings√•s stad', 'Uddevalla stad'
    ]

    try:
        # L√§s in GeoJSON-data
        with open('data/kommuner.geo.json', 'r', encoding='utf-8') as f:
            alla_kommuner = json.load(f)

        # Filtrera VG-kommuner
        vg_features = []
        for kommun in alla_kommuner:
            if isinstance(kommun, dict) and 'geometry' in kommun:
                namn = kommun.get('namn')
                if namn in vg_kommuner_namn:
                    vg_features.append({
                        "type": "Feature",
                        "properties": {
                            "name": namn,
                            "original": kommun
                        },
                        "geometry": kommun['geometry']
                    })

        # Generera f√§rger och l√§gg till p√• kartan
        colors = generate_distinct_colors(len(vg_features))

        for feature, color in zip(vg_features, colors):
            kommun_namn = feature['properties']['name']
            style_function = StyleFunction(color)

            geojson = folium.GeoJson(
                feature,  # Anv√§nd hela feature-objektet direkt
                name=kommun_namn,
                style_function=style_function,
                tooltip=kommun_namn
            )
            geojson.add_to(kommun_layer)

    except Exception as e:
        st.error(f"Fel vid hantering av kommundata: {str(e)}")
        import traceback
        st.write("Detaljerat fel:", traceback.format_exc())

    kommun_layer.add_to(m)

    # Skapa feature groups f√∂r olika typer av mark√∂rer
    layers = {
        'visionombud': folium.FeatureGroup(name="üëÅÔ∏è Visionombud"),
        'skyddsombud': folium.FeatureGroup(name="üõ°Ô∏è Skyddsombud")
    }

    # L√§gg till alla lager till kartan direkt
    for layer in layers.values():
        m.add_child(layer)

    # Lista f√∂r misslyckade platser
    failed_locations = []

    for arbetsplats in _arbetsplatser:
        try:
            if not arbetsplats.get("coordinates"):
                failed_locations.append(f"{arbetsplats.get('namn', 'Ok√§nd arbetsplats')} - Saknar koordinater")
                continue

            location_data = {
                "latitude": arbetsplats["coordinates"]["lat"],
                "longitude": arbetsplats["coordinates"]["lng"]
            }

            har_visionombud = any(
                p.get('visionombud') and arbetsplats['namn'] in p.get('arbetsplats', [])
                for p in _personer
            )

            har_skyddsombud = any(
                p.get('skyddsombud') and arbetsplats['namn'] in p.get('arbetsplats', [])
                for p in _personer
            )

            # Hitta alla ombud och medlemmar f√∂r denna arbetsplats
            visionombud_list = [f"{p.get('namn', '')} ({p.get('forvaltning_namn', '')})"
                                for p in _personer
                                if p.get('visionombud') and arbetsplats['namn'] in p.get('arbetsplats', [])]

            skyddsombud_list = [f"{p.get('namn', '')} ({p.get('forvaltning_namn', '')})"
                                for p in _personer
                                if p.get('skyddsombud') and arbetsplats['namn'] in p.get('arbetsplats', [])]

            # R√§kna medlemmar per niv√•
            medlemmar_total = 0
            medlemmar_per_enhet = {}
            medlemmar_per_avdelning = {}
            medlemmar_per_forvaltning = {}

            # Om arbetsplatsen har ett direkt medlemsantal
            if 'medlemsantal' in arbetsplats:
                medlemmar_total = arbetsplats['medlemsantal']
                if arbetsplats.get('forvaltning_namn'):
                    medlemmar_per_forvaltning[arbetsplats['forvaltning_namn']] = medlemmar_total

            # Om arbetsplatsen har medlemmar per f√∂rvaltning
            elif arbetsplats.get('medlemmar_per_forvaltning'):
                for forv_id, forv_data in arbetsplats['medlemmar_per_forvaltning'].items():
                    try:
                        # Hitta f√∂rvaltningsnamnet fr√•n databasen
                        forvaltning = _db.forvaltningar.find_one({"_id": ObjectId(forv_id)})
                        if forvaltning and isinstance(forv_data, dict):
                            # R√§kna medlemmar fr√•n enheter under denna f√∂rvaltning
                            if 'enheter' in forv_data:
                                for enhet_id, antal in forv_data['enheter'].items():
                                    if isinstance(antal, (int, float)):
                                        medlemmar_total += antal
                                        # Hitta enhetsnamnet fr√•n databasen
                                        enhet = _db.enheter.find_one({"_id": ObjectId(enhet_id)})
                                        if enhet:
                                            medlemmar_per_enhet[enhet['namn']] = antal
                                            # L√§gg till i avdelningsstatistiken
                                            if enhet.get('avdelning_namn'):
                                                medlemmar_per_avdelning[enhet['avdelning_namn']] = \
                                                    medlemmar_per_avdelning.get(enhet['avdelning_namn'], 0) + antal
                                            # L√§gg till i f√∂rvaltningsstatistiken
                                            medlemmar_per_forvaltning[forvaltning['namn']] = \
                                                medlemmar_per_forvaltning.get(forvaltning['namn'], 0) + antal
                    except Exception as e:
                        st.error(f"Fel vid h√§mtning av data f√∂r f√∂rvaltning {forv_id}: {str(e)}")

            # Formatera medlemstext
            medlemmar_text = f"Antal Medlemmar: {medlemmar_total}<br>"
            
            if medlemmar_per_enhet:
                medlemmar_text += "<br>Antal Medlemmar per Enhet:<br>"
                for enhet, antal in sorted(medlemmar_per_enhet.items()):
                    medlemmar_text += f"&nbsp;&nbsp;{enhet}: {antal}<br>"
            
            if medlemmar_per_avdelning:
                medlemmar_text += "<br>Antal Medlemmar per Avdelning:<br>"
                for avd, antal in sorted(medlemmar_per_avdelning.items()):
                    medlemmar_text += f"&nbsp;&nbsp;{avd}: {antal}<br>"
            
            if medlemmar_per_forvaltning:
                medlemmar_text += "<br>Antal Medlemmar per F√∂rvaltning:<br>"
                for forv, antal in sorted(medlemmar_per_forvaltning.items()):
                    medlemmar_text += f"&nbsp;&nbsp;{forv}: {antal}<br>"

            # Skapa baskoordinater
            location = [location_data["latitude"], location_data["longitude"]]

            # Formatera popup-text med namn p√• ombuden och bredare stil
            visionombud_text = "<br>".join(visionombud_list) if visionombud_list else "Saknar Visionombud"
            skyddsombud_text = "<br>".join(skyddsombud_list) if skyddsombud_list else "Saknar Skyddsombud"

            popup_text = f'''
                <div style="min-width: 300px; max-width: 500px;">
                    <h4 style="margin-bottom: 10px;">{arbetsplats['namn']}</h4>
                    <div style="margin-bottom: 15px;">
                        <strong>Visionombud:</strong><br>
                        {visionombud_text}
                    </div>
                    <div style="margin-bottom: 15px;">
                        <strong>Skyddsombud:</strong><br>
                        {skyddsombud_text}
                    </div>
                    <div>
                        {medlemmar_text}
                    </div>
                </div>
            '''

            # Uppdatera tooltip-texter ocks√•
            vision_tooltip = "Visionombud: " + (", ".join(visionombud_list) if visionombud_list else "Saknas")
            skydd_tooltip = "Skyddsombud: " + (", ".join(skyddsombud_list) if skyddsombud_list else "Saknas")

            # Skapa HTML f√∂r skyddsombud-mark√∂ren
            check_html = f'''
                <div style="
                    font-family: Arial; 
                    font-size: 18px; 
                    color: {'green' if har_skyddsombud else 'red'};
                    text-shadow: 
                        -1px -1px 0 white,
                        1px -1px 0 white,
                        -1px 1px 0 white,
                        1px 1px 0 white;
                    font-weight: bold;
                ">
                    {'‚úì' if har_skyddsombud else '‚úï'}
                </div>
            '''

            # L√§gg till cirkelmark√∂r f√∂r Visionombud
            folium.CircleMarker(
                location=location,
                radius=8,
                popup=folium.Popup(popup_text, max_width=500),  # Anv√§nd Popup-objekt f√∂r b√§ttre kontroll
                tooltip=vision_tooltip,
                color='green' if har_visionombud else 'red',
                fill=True
            ).add_to(layers['visionombud'])

            # L√§gg till bock/kryss f√∂r Skyddsombud
            folium.Marker(
                location=[location[0] + 0.0003, location[1]],
                popup=folium.Popup(popup_text, max_width=500),  # Samma popup h√§r
                tooltip=skydd_tooltip,
                icon=folium.DivIcon(
                    html=check_html,
                    icon_size=(20, 20),
                    icon_anchor=(10, 10)
                )
            ).add_to(layers['skyddsombud'])

        except Exception as e:
            failed_locations.append(f"{arbetsplats.get('namn', 'ok√§nd arbetsplats')} - {str(e)}")
            continue

    # L√§gg till lager-kontroll
    folium.LayerControl(
        position='topright',
        collapsed=False,
        autoZIndex=True
    ).add_to(m)

    return m, failed_locations


def show(db):
    """Huvudfunktion f√∂r statistikvisualisering och analys.
    
    Denna funktion hanterar den √∂vergripande presentationen av statistik
    och visualiseringar f√∂r Vision Sektion 10. Den √§r uppdelad i flera
    huvudomr√•den f√∂r att ge en komplett √∂versikt √∂ver organisationen.
    
    Funktionalitet:
    1. Datainsamling och Bearbetning
       - H√§mtar aktuell data fr√•n MongoDB
       - Ber√§knar nyckeltal och statistik
       - F√∂rbereder data f√∂r visualisering
    
    2. Visualiseringar
       - Interaktiv t√§ckningskarta
       - Statistiska diagram och grafer
       - Trendanalyser och j√§mf√∂relser
    
    3. Anv√§ndarinteraktion
       - Filtreringsm√∂jligheter
       - Detaljerad information
       - Nedladdningsalternativ
    
    Args:
        db: MongoDB-databasanslutning
    
    Tekniska detaljer:
    - Anv√§nder Streamlit f√∂r UI
    - Plotly f√∂r interaktiva grafer
    - Folium f√∂r kartvisualisering
    - Implementerar cachning
    """
    # Konfigurera sidlayout och titel
    st.title("üìä Statistik")
    
    # H√§mta aktuell data fr√•n databasen
    arbetsplatser = list(db.arbetsplatser.find())
    personer = list(db.personer.find())
    
    # Skapa huvudflikar f√∂r olika vyer
    tab1, tab2 = st.tabs(["üó∫Ô∏è T√§ckningskarta", "üìà Statistik"])
    
    # Hantera t√§ckningskarta
    with tab1:
        st.header("üó∫Ô∏è T√§ckningskarta")
        st.markdown("""
        Kartan visar arbetsplatser och deras representation:
        - ‚≠ï Cirkel: Visionombud (gr√∂n = har ombud, r√∂d = saknar ombud)
        - ‚úì/‚úï Mark√∂r: Skyddsombud (gr√∂n ‚úì = har ombud, r√∂d ‚úï = saknar ombud)
        
        Klicka p√• mark√∂rerna f√∂r att se detaljerad information om:
        - Visionombud
        - Skyddsombud
        - Antal medlemmar (totalt och per niv√•)
        """)
        
        # L√§gg till knapp f√∂r att uppdatera koordinater
        if st.button("üîÑ Uppdatera och geocodea arbetsplatser"):
            with st.spinner("Uppdaterar koordinater f√∂r arbetsplatser..."):
                for arbetsplats in arbetsplatser:
                    if not arbetsplats.get("coordinates"):
                        # Skapa s√∂kadress fr√•n arbetsplatsens information
                        address = f"{arbetsplats.get('gatuadress', '')}, {arbetsplats.get('postnummer', '')} {arbetsplats.get('ort', '')}"
                        
                        try:
                            # Anv√§nd Nominatim f√∂r att geocodea adressen
                            from geopy.geocoders import Nominatim
                            from geopy.exc import GeocoderTimedOut
                            
                            geolocator = Nominatim(user_agent="vision_section10")
                            location = geolocator.geocode(address)
                            
                            if location:
                                # Uppdatera databasen med nya koordinater
                                db.arbetsplatser.update_one(
                                    {"_id": arbetsplats["_id"]},
                                    {"$set": {
                                        "coordinates": {
                                            "lat": location.latitude,
                                            "lng": location.longitude
                                        }
                                    }}
                                )
                        except Exception as e:
                            st.error(f"Kunde inte uppdatera koordinater f√∂r {arbetsplats.get('namn', 'ok√§nd arbetsplats')}: {str(e)}")
                            continue
                
                st.success("Koordinater uppdaterade! Ladda om sidan f√∂r att se √§ndringarna.")
                st.rerun()
        
        # Generera och visa interaktiv karta
        karta, saknar_koordinater = load_map(arbetsplatser, personer, db)
        folium_static(karta)
        
        # Visa information om saknade koordinater
        if saknar_koordinater:
            with st.expander("‚ÑπÔ∏è Arbetsplatser som saknar koordinater"):
                st.write("F√∂ljande arbetsplatser kunde inte visas p√• kartan d√• koordinater saknas:")
                for namn in saknar_koordinater:
                    st.write(f"- {namn}")
    
    # Hantera statistik√∂versikt
    with tab2:
        st.header("üìà Statistik")
        
        # Ber√§kna grundl√§ggande statistik
        total_arbetsplatser = len(arbetsplatser)
        total_personer = len(personer)
        
        # Visa nyckeltal i kolumner
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Totalt antal arbetsplatser", total_arbetsplatser)
        with col2:
            st.metric("Totalt antal personer med uppdrag", total_personer)
        with col3:
            if total_arbetsplatser > 0:
                tackningsgrad = len([p for p in personer if p.get('uppdrag', {}).get('visionombud')]) / total_arbetsplatser * 100
                st.metric("T√§ckningsgrad Visionombud", f"{tackningsgrad:.1f}%")
        
        # Analysera uppdragsf√∂rdelning
        uppdrag_stats = defaultdict(int)
        for person in personer:
            for uppdrag_typ, data in person.get('uppdrag', {}).items():
                if data:  # R√§kna endast aktiva uppdrag
                    uppdrag_stats[uppdrag_typ] += 1
        
        # Visualisera uppdragsstatistik
        if uppdrag_stats:
            st.subheader("F√∂rdelning av uppdrag")
            df_uppdrag = pd.DataFrame([
                {"Uppdrag": uppdrag, "Antal": antal}
                for uppdrag, antal in uppdrag_stats.items()
            ])
            
            # Skapa interaktivt diagram
            fig = px.bar(df_uppdrag, 
                        x="Uppdrag", 
                        y="Antal",
                        title="Antal personer per uppdragstyp",
                        labels={"Uppdrag": "Typ av uppdrag", "Antal": "Antal personer"},
                        color="Uppdrag")
            
            # Optimera diagramlayout
            fig.update_layout(
                showlegend=False,
                xaxis_tickangle=-45,
                height=400
            )
            
            # Visa diagram med automatisk breddanpassning
            st.plotly_chart(fig, use_container_width=True)
            
            # Skapa f√∂rdjupad analys av representation
            st.subheader("Representationsanalys")
            
            # Ber√§kna t√§ckningsgrad per f√∂rvaltning
            forvaltningar = defaultdict(lambda: {"total": 0, "med_ombud": 0})
            for arbetsplats in arbetsplatser:
                forv = arbetsplats.get('forvaltning', 'Ok√§nd')
                forvaltningar[forv]["total"] += 1
                
                # Kontrollera om arbetsplatsen har ombud
                har_ombud = any(
                    p.get('uppdrag', {}).get('visionombud', {}).get('arbetsplats_id') == arbetsplats['_id']
                    for p in personer
                )
                if har_ombud:
                    forvaltningar[forv]["med_ombud"] += 1
            
            # Skapa dataframe f√∂r f√∂rvaltningsstatistik
            df_forvaltning = pd.DataFrame([
                {
                    "F√∂rvaltning": forv,
                    "T√§ckningsgrad": (data["med_ombud"] / data["total"] * 100 if data["total"] > 0 else 0),
                    "Antal arbetsplatser": data["total"],
                    "Med ombud": data["med_ombud"]
                }
                for forv, data in forvaltningar.items()
                if forv != "Ok√§nd"  # Exkludera ok√§nda f√∂rvaltningar
            ])
            
            if not df_forvaltning.empty:
                # Skapa interaktivt diagram f√∂r f√∂rvaltningsanalys
                fig_forv = px.bar(
                    df_forvaltning,
                    x="F√∂rvaltning",
                    y="T√§ckningsgrad",
                    title="T√§ckningsgrad per f√∂rvaltning",
                    labels={
                        "F√∂rvaltning": "F√∂rvaltning",
                        "T√§ckningsgrad": "T√§ckningsgrad (%)"
                    },
                    color="T√§ckningsgrad",
                    color_continuous_scale="RdYlGn",  # R√∂d till gul till gr√∂n f√§rgskala
                    hover_data=["Antal arbetsplatser", "Med ombud"]
                )
                
                # Optimera diagramlayout
                fig_forv.update_layout(
                    xaxis_tickangle=-45,
                    height=500,
                    yaxis_range=[0, 100]  # S√§tt y-axeln till 0-100%
                )
                
                # Visa diagram med automatisk breddanpassning
                st.plotly_chart(fig_forv, use_container_width=True)
                
                # Visa detaljerad statistik i tabellform
                with st.expander("üìã Visa detaljerad statistik"):
                    st.dataframe(
                        df_forvaltning.sort_values("T√§ckningsgrad", ascending=False),
                        hide_index=True
                    )
            
            # Analysera trender √∂ver tid
            st.subheader("Tidsutveckling")
            
            # H√§mta historisk data fr√•n loggar
            logs = list(db.logs.find(
                {"category": "person", "action": "create"},
                {"timestamp": 1}
            ).sort("timestamp", 1))
            
            if logs:
                # Skapa tidsserie f√∂r kumulativ tillv√§xt
                dates = [log['timestamp'] for log in logs]
                cumulative = range(1, len(dates) + 1)
                
                # Skapa dataframe f√∂r tidsanalys
                df_time = pd.DataFrame({
                    'Datum': dates,
                    'Antal': cumulative
                })
                
                # Skapa interaktivt linjediagram
                fig_time = px.line(
                    df_time,
                    x='Datum',
                    y='Antal',
                    title='Utveckling av antal personer med uppdrag √∂ver tid',
                    labels={
                        'Datum': 'Datum',
                        'Antal': 'Totalt antal personer'
                    }
                )
                
                # Optimera diagramlayout
                fig_time.update_layout(
                    height=400,
                    showlegend=False
                )
                
                # Visa diagram med automatisk breddanpassning
                st.plotly_chart(fig_time, use_container_width=True)
