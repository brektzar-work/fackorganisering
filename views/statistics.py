"""
Statistikmodul f√∂r Vision Sektion 10.

Detta system hanterar avancerad statistik och visualisering av organisationsdata:
1. Grundl√§ggande statistik
   - Totalt antal personer med uppdrag
   - F√∂rdelning av olika uppdragstyper
   - T√§ckningsgrad f√∂r ombud

2. Detaljerade analyser
   - F√∂rdelning per f√∂rvaltning
   - Interaktiva grafer och diagram
   - Trendanalyser och j√§mf√∂relser

3. Geografisk visualisering
   - T√§ckningskarta med arbetsplatser
   - Visualisering av ombud och representation
   - Kommungr√§nser och regional indelning

4. Medlemsstatistik
   - F√∂rdelning av medlemmar
   - Analys av representation
   - Demografiska √∂versikter

Tekniska detaljer:
- Anv√§nder Plotly f√∂r interaktiva visualiseringar
- Implementerar Folium f√∂r kartfunktionalitet
- Hanterar komplex databearbetning med Pandas
- Tillhandah√•ller cachning f√∂r optimerad prestanda
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import folium
from streamlit_folium import folium_static
import json
import colorsys
from collections import defaultdict
from bson import ObjectId
from views.cache_manager import get_cached_data, update_cache_after_change
import plotly.graph_objects as go
from geopy.geocoders import Nominatim
from geopy.exc import GeocoderTimedOut
import time


def generate_distinct_colors(n):
    """Genererar en upps√§ttning visuellt distinkta f√§rger.
    
    Funktionen skapar f√§rger med j√§mn f√∂rdelning i f√§rghjulet f√∂r optimal
    visuell separation mellan n√§rliggande f√§rger. Anv√§nder HSV-f√§rgrymd
    f√∂r b√§ttre kontroll √∂ver f√§rgm√§ttnad och ljusstyrka.
    
    Args:
        n (int): Antal f√§rger att generera
    
    Returns:
        list: Lista med hex-f√§rgkoder
    
    Tekniska detaljer:
    - Anv√§nder HSV-f√§rgrymd f√∂r b√§ttre f√§rgkontroll
    - Implementerar transparens f√∂r b√§ttre visualisering
    - Konverterar till hex-format f√∂r webbkompatibilitet
    """
    colors = []
    for i in range(n):
        hue = i / n
        # Anv√§nd ljusa, transparenta f√§rger f√∂r b√§ttre visualisering
        rgb = colorsys.hsv_to_rgb(hue, 0.3, 0.9)
        hex_color = '#{:02x}{:02x}{:02x}'.format(
            int(rgb[0] * 255),
            int(rgb[1] * 255),
            int(rgb[2] * 255)
        )
        colors.append(hex_color)
    return colors


class StyleFunction:
    """Hanterar stils√§ttning f√∂r geografiska element p√• kartan.
    
    Denna klass definierar utseendet f√∂r geografiska omr√•den som
    kommuner och regioner p√• kartan. Den implementerar en callable
    interface f√∂r anv√§ndning med Folium's style_function.
    
    Attribut:
        color (str): Hex-f√§rgkod f√∂r omr√•det
    
    Tekniska detaljer:
    - Implementerar __call__ f√∂r anv√§ndning som callback
    - Hanterar serialisering f√∂r cachning
    - Definierar standardv√§rden f√∂r kartvisualisering
    """
    def __init__(self, color):
        self.color = color

    def __call__(self, feature):
        """Returnerar stilattribut f√∂r ett geografiskt element.
        
        Args:
            feature: GeoJSON-feature som ska stils√§ttas
        
        Returns:
            dict: Stilattribut f√∂r elementet
        """
        return {
            'fillColor': self.color,
            'fillOpacity': 0.3,
            'color': 'gray',
            'weight': 1,
            'dashArray': '5, 5'
        }

    def __getstate__(self):
        """Serialiserar objektet f√∂r cachning."""
        return {'color': self.color}

    def __setstate__(self, state):
        """√Öterst√§ller objektet fr√•n cachad data."""
        self.color = state['color']


@st.cache_data(ttl=3600)  # Cache i 1 timme
def load_map(_arbetsplatser, _personer, _db):
    """Laddar och skapar kartan med alla arbetsplatser och ombud."""
    # Skapa en karta centrerad √∂ver V√§stra G√∂taland med begr√§nsningar
    m = folium.Map(
        location=[58.2, 13.0],  # Centrerad √∂ver VGR
        zoom_start=8,
        min_zoom=7,  # F√∂rhindra f√∂r mycket utzoomning
        max_zoom=18,  # √ñkat fr√•n 13 till 18 f√∂r att till√•ta n√§rmare inzoomning
        max_bounds=True,  # Aktivera gr√§nser
        min_lat=56.0,  # S√∂dra gr√§nsen
        max_lat=60.0,  # Norra gr√§nsen
        min_lon=10.0,  # V√§stra gr√§nsen
        max_lon=15.5,  # √ñstra gr√§nsen
        attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
    )

    # S√§tt gr√§nser f√∂r panorering
    m.fit_bounds([[56.0, 10.0], [60.0, 15.5]])

    # L√§gg till kommungr√§nser som ett eget lager
    kommun_layer = folium.FeatureGroup(name="üèõÔ∏è Kommuner")

    # Lista √∂ver kommuner i V√§stra G√∂taland
    vg_kommuner_namn = [
        'Ale kommun', 'Alings√•s kommun', 'Bengtsfors kommun', 'Bollebygds kommun', 'Bor√•s kommun',
        'Dals-Eds kommun', 'Essunga kommun', 'Falk√∂pings kommun', 'F√§rgelanda kommun', 'Gr√§storps kommun',
        'Gullsp√•ngs kommun', 'G√∂teborgs kommun', 'G√∂tene kommun', 'Herrljunga kommun', 'Hjo kommun',
        'H√§rryda kommun', 'Karlsborgs kommun', 'Kung√§lvs kommun', 'Lerums kommun', 'Lidk√∂pings kommun',
        'Lilla Edets kommun', 'Lysekils kommun', 'Mariestads kommun', 'Marks kommun', 'Melleruds kommun',
        'Munkedals kommun', 'M√∂lndals kommun', 'Orusts kommun', 'Partille kommun', 'Skara kommun',
        'Sk√∂vde kommun', 'Soten√§s kommun', 'Stenungsunds kommun', 'Str√∂mstads kommun', 'Svenljunga kommun',
        'Tanums kommun', 'Tibro kommun', 'Tidaholms kommun', 'Tj√∂rns kommun', 'Tranemo kommun',
        'Trollh√§ttans kommun', 'T√∂reboda kommun', 'Uddevalla kommun', 'Ulricehamns kommun', 'Vara kommun',
        'V√•rg√•rda kommun', 'V√§nersborgs kommun', '√Öm√•ls kommun', '√ñcker√∂ kommun',
        # Specialfall
        'G√∂teborgs stad', 'G√∂teborg stad', 'Bor√•s stad', 'Trollh√§ttans stad', 'V√§nersborgs stad',
        'Sk√∂vde stad', 'Lidk√∂pings stad', 'M√∂lndals stad', 'Alings√•s stad', 'Uddevalla stad'
    ]

    try:
        # L√§s in GeoJSON-data f√∂r kommuner
        with open('data/kommuner.geo.json', 'r', encoding='utf-8') as f:
            alla_kommuner = json.load(f)

        # Filtrera VG-kommuner och l√§gg till p√• kartan
        vg_features = []
        for kommun in alla_kommuner:
            if isinstance(kommun, dict) and 'geometry' in kommun:
                namn = kommun.get('namn')
                if namn in vg_kommuner_namn:
                    vg_features.append({
                        "type": "Feature",
                        "properties": {
                            "name": namn,
                            "original": kommun
                        },
                        "geometry": kommun['geometry']
                    })

        # Generera f√§rger och l√§gg till p√• kartan
        colors = generate_distinct_colors(len(vg_features))
        for feature, color in zip(vg_features, colors):
            kommun_namn = feature['properties']['name']
            style_function = StyleFunction(color)

            geojson = folium.GeoJson(
                feature,
                name=kommun_namn,
                style_function=style_function,
                tooltip=kommun_namn
            )
            geojson.add_to(kommun_layer)

    except Exception as e:
        st.error(f"Fel vid hantering av kommundata: {str(e)}")

    # L√§gg till kommunlagret till kartan
    kommun_layer.add_to(m)

    # Skapa feature groups f√∂r olika typer av mark√∂rer
    layers = {
        'visionombud': folium.FeatureGroup(name="üëÅÔ∏è Visionombud"),
        'skyddsombud': folium.FeatureGroup(name="üõ°Ô∏è Skyddsombud")
    }

    # L√§gg till alla lager till kartan
    for layer in layers.values():
        m.add_child(layer)

    # Lista f√∂r misslyckade platser
    failed_locations = []

    # R√§kna arbetsplatser med koordinater
    arbetsplatser_med_koordinater = [ap for ap in _arbetsplatser if ap.get('coordinates')]
    
    for arbetsplats in arbetsplatser_med_koordinater:
        try:
            # Kontrollera att koordinaterna √§r giltiga
            if not arbetsplats.get("coordinates") or \
               not isinstance(arbetsplats["coordinates"].get("lat"), (int, float)) or \
               not isinstance(arbetsplats["coordinates"].get("lng"), (int, float)):
                failed_locations.append(f"{arbetsplats.get('namn', 'Ok√§nd arbetsplats')} - Ogiltiga koordinater")
                continue

            # H√§mta koordinater
            location = [
                arbetsplats["coordinates"]["lat"],
                arbetsplats["coordinates"]["lng"]
            ]

            # Kontrollera att koordinaterna √§r inom rimliga gr√§nser
            if not (56.0 <= location[0] <= 60.0 and 10.0 <= location[1] <= 15.5):
                failed_locations.append(f"{arbetsplats.get('namn', 'Ok√§nd arbetsplats')} - Koordinater utanf√∂r VG-regionen")
                continue

            # Hitta ombud f√∂r denna arbetsplats
            visionombud_list = [
                f"{p.get('namn', '')} ({p.get('forvaltning_namn', '')})"
                for p in _personer
                if p.get('visionombud') and arbetsplats['namn'] in p.get('arbetsplats', [])
            ]
            
            skyddsombud_list = [
                f"{p.get('namn', '')} ({p.get('forvaltning_namn', '')})"
                for p in _personer
                if p.get('skyddsombud') and arbetsplats['namn'] in p.get('arbetsplats', [])
            ]

            har_visionombud = len(visionombud_list) > 0
            har_skyddsombud = len(skyddsombud_list) > 0

            # Skapa popup-inneh√•ll
            popup_text = f"""
            <div style='min-width: 200px'>
                <h4>{arbetsplats['namn']}</h4>
                <p><strong>Adress:</strong><br>
                {arbetsplats.get('gatuadress', '')}<br>
                {arbetsplats.get('postnummer', '')} {arbetsplats.get('ort', '')}</p>
                <p><strong>Kommun:</strong> {arbetsplats.get('kommun', '')}</p>
                <p><strong>F√∂rvaltning:</strong> {arbetsplats.get('forvaltning_namn', 'Alla f√∂rvaltningar')}</p>
                
                <div style='margin-top: 10px'>
                    <strong>Visionombud:</strong><br>
                    {'<br>'.join(visionombud_list) if visionombud_list else 'Saknas'}
                </div>
                
                <div style='margin-top: 10px'>
                    <strong>Skyddsombud:</strong><br>
                    {'<br>'.join(skyddsombud_list) if skyddsombud_list else 'Saknas'}
                </div>
            </div>
            """

            # Skapa tooltips
            vision_tooltip = f"{arbetsplats['namn']} - {'Har' if har_visionombud else 'Saknar'} Visionombud"
            skydd_tooltip = f"{arbetsplats['namn']} - {'Har' if har_skyddsombud else 'Saknar'} Skyddsombud"

            # HTML f√∂r bock/kryss
            check_html = f"""
                <div style='text-align: center; line-height: 20px; font-size: 16px; color: {'green' if har_skyddsombud else 'red'};'>
                    {'‚úì' if har_skyddsombud else '‚úó'}
                </div>
            """

            # L√§gg till cirkelmark√∂r f√∂r Visionombud
            folium.CircleMarker(
                location=location,
                radius=8,
                popup=folium.Popup(popup_text, max_width=500),
                tooltip=vision_tooltip,
                color='green' if har_visionombud else 'red',
                fill=True
            ).add_to(layers['visionombud'])

            # L√§gg till bock/kryss f√∂r Skyddsombud
            folium.Marker(
                location=[location[0] + 0.0003, location[1]],
                popup=folium.Popup(popup_text, max_width=500),
                tooltip=skydd_tooltip,
                icon=folium.DivIcon(
                    html=check_html,
                    icon_size=(20, 20),
                    icon_anchor=(10, 10)
                )
            ).add_to(layers['skyddsombud'])

        except Exception as e:
            failed_locations.append(f"{arbetsplats.get('namn', 'Ok√§nd arbetsplats')} - {str(e)}")
            continue

    # L√§gg till lager-kontroll
    folium.LayerControl(
        position='topright',
        collapsed=False,
        autoZIndex=True
    ).add_to(m)

    return m, failed_locations


def geocode_address(address, city, municipality):
    """Konverterar en adress till koordinater med hj√§lp av Nominatim."""
    try:
        geolocator = Nominatim(user_agent="vision_sektion10")
        # Kombinera adress med stad och kommun f√∂r b√§ttre tr√§ffs√§kerhet
        full_address = f"{address}, {city}, {municipality}, V√§stra G√∂taland, Sweden"
        location = geolocator.geocode(full_address)
        
        if location:
            return {"lat": location.latitude, "lng": location.longitude}
        return None
    except GeocoderTimedOut:
        time.sleep(1)  # V√§nta en sekund och f√∂rs√∂k igen
        return geocode_address(address, city, municipality)
    except Exception as e:
        st.error(f"Fel vid geokodning av {address}: {str(e)}")
        return None


def generate_missing_coordinates(db, arbetsplatser):
    """Genererar koordinater f√∂r arbetsplatser som saknar dem."""
    updated_count = 0
    failed_count = 0
    
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    total = len([ap for ap in arbetsplatser if not ap.get('coordinates')])
    current = 0
    
    for arbetsplats in arbetsplatser:
        if not arbetsplats.get('coordinates'):
            current += 1
            progress = current / total
            progress_bar.progress(progress)
            status_text.text(f"Bearbetar {current} av {total} arbetsplatser...")
            
            if arbetsplats.get('gatuadress') and arbetsplats.get('ort') and arbetsplats.get('kommun'):
                coordinates = geocode_address(
                    arbetsplats['gatuadress'],
                    arbetsplats['ort'],
                    arbetsplats['kommun']
                )
                
                if coordinates:
                    # Uppdatera databasen med de nya koordinaterna
                    result = db.arbetsplatser.update_one(
                        {"_id": arbetsplats["_id"]},
                        {"$set": {"coordinates": coordinates}}
                    )
                    if result.modified_count > 0:
                        updated_count += 1
                else:
                    failed_count += 1
            else:
                failed_count += 1
    
    progress_bar.empty()
    status_text.empty()
    
    return updated_count, failed_count


def show(db):
    """Visar statistik och grafer f√∂r organisationen."""
    st.header("Statistik och Grafer")

    # Ladda cachad data
    cached, indexes = get_cached_data(db)
    
    # Uppdateringsknapp i sidof√§ltet
    if st.sidebar.button("‚Üª Uppdatera data", key="refresh_stats"):
        cached, indexes = get_cached_data(db, force_refresh=True)
        st.rerun()

    # Skapa flikar f√∂r olika typer av statistik
    tab1, tab2, tab3, tab4 = st.tabs([
        "√ñversikt",
        "Detaljerad Statistik",
        "Ombudsstatistik",
        "Karta"
    ])

    with tab1:
        st.subheader("√ñversikt")
        
        # Ber√§kna totala antalet och nyckeltal
        total_personer = len(cached['personer'])
        total_arbetsplatser = len(cached['arbetsplatser'])
        total_forvaltningar = len(cached['forvaltningar'])
        total_avdelningar = len(cached['avdelningar'])
        total_enheter = len(cached['enheter'])
        total_visionombud = len([p for p in cached['personer'] if p.get('visionombud', False)])
        total_skyddsombud = len([p for p in cached['personer'] if p.get('skyddsombud', False)])
        total_members = sum(f.get('beraknat_medlemsantal', 0) for f in cached['forvaltningar'])

        # Visa nyckeltal i kolumner
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Totalt antal medlemmar", total_members)
            st.metric("Visionombud", total_visionombud)
            st.metric("Medlemmar per Visionombud", round(total_members / total_visionombud if total_visionombud > 0 else 0, 1))
        with col2:
            st.metric("Antal Arbetsplatser", total_arbetsplatser)
            st.metric("Skyddsombud", total_skyddsombud)
            st.metric("Medlemmar per Skyddsombud", round(total_members / total_skyddsombud if total_skyddsombud > 0 else 0, 1))
        with col3:
            st.metric("F√∂rvaltningar", total_forvaltningar)
            st.metric("Avdelningar", total_avdelningar)
            st.metric("Enheter", total_enheter)

        # Skapa en pie chart f√∂r f√∂rdelning av medlemmar per f√∂rvaltning
        medlemmar_per_forv = {
            f['namn']: f.get('beraknat_medlemsantal', 0) 
            for f in cached['forvaltningar'] 
            if f.get('beraknat_medlemsantal', 0) > 0
        }
        if medlemmar_per_forv:
            fig = px.pie(
                values=list(medlemmar_per_forv.values()),
                names=list(medlemmar_per_forv.keys()),
                title="F√∂rdelning av medlemmar per f√∂rvaltning"
            )
            st.plotly_chart(fig, key="pie_medlemmar_per_forv")

        # Skapa stapeldiagram f√∂r ombud per f√∂rvaltning
        ombud_data = []
        for forv in cached['forvaltningar']:
            forv_personer = [p for p in cached['personer'] if str(p.get('forvaltning_id')) == str(forv['_id'])]
            vision_count = len([p for p in forv_personer if p.get('visionombud', False)])
            skydd_count = len([p for p in forv_personer if p.get('skyddsombud', False)])
            if vision_count > 0 or skydd_count > 0:
                ombud_data.append({
                    'F√∂rvaltning': forv['namn'],
                    'Visionombud': vision_count,
                    'Skyddsombud': skydd_count
                })

        if ombud_data:
            df = pd.DataFrame(ombud_data)
            fig = px.bar(
                df,
                x='F√∂rvaltning',
                y=['Visionombud', 'Skyddsombud'],
                title="F√∂rdelning av ombud per f√∂rvaltning",
                barmode='group'
            )
            st.plotly_chart(fig, key="bar_ombud_per_forv")

    with tab2:
        st.subheader("Detaljerad Statistik")
        
        # Skapa stapeldiagram f√∂r arbetsplatser per f√∂rvaltning
        arbetsplatser_per_forv = {}
        for arbetsplats in cached['arbetsplatser']:
            if arbetsplats.get('alla_forvaltningar'):
                arbetsplatser_per_forv['Regionala'] = arbetsplatser_per_forv.get('Regionala', 0) + 1
            else:
                forv_namn = arbetsplats.get('forvaltning_namn', 'Ok√§nd')
                arbetsplatser_per_forv[forv_namn] = arbetsplatser_per_forv.get(forv_namn, 0) + 1

        if arbetsplatser_per_forv:
            fig = px.bar(
                x=list(arbetsplatser_per_forv.keys()),
                y=list(arbetsplatser_per_forv.values()),
                title="Antal arbetsplatser per f√∂rvaltning",
                labels={'x': 'F√∂rvaltning', 'y': 'Antal arbetsplatser'}
            )
            st.plotly_chart(fig, key="bar_arbetsplatser_per_forv")

        # Ny graf: J√§mf√∂relse av ombud per arbetsplats
        arbetsplats_ombud_data = []
        for arbetsplats in cached['arbetsplatser']:
            vision_count = len([p for p in cached['personer'] 
                              if p.get('visionombud', False) and 
                              arbetsplats['namn'] in p.get('arbetsplats', [])])
            skydd_count = len([p for p in cached['personer'] 
                             if p.get('skyddsombud', False) and 
                             arbetsplats['namn'] in p.get('arbetsplats', [])])
            
            if vision_count > 0 or skydd_count > 0:
                arbetsplats_ombud_data.append({
                    'Arbetsplats': arbetsplats['namn'],
                    'Visionombud': vision_count,
                    'Skyddsombud': skydd_count,
                    'F√∂rvaltning': arbetsplats.get('forvaltning_namn', 'Regionala')
                })

        if arbetsplats_ombud_data:
            # Sortera efter totalt antal ombud (Vision + Skydd)
            arbetsplats_ombud_data.sort(
                key=lambda x: x['Visionombud'] + x['Skyddsombud'], 
                reverse=True
            )
            
            df = pd.DataFrame(arbetsplats_ombud_data)
            fig = px.bar(
                df,
                x='Arbetsplats',
                y=['Visionombud', 'Skyddsombud'],
                title="Antal ombud per arbetsplats",
                barmode='group',
                color_discrete_sequence=['#2ecc71', '#e74c3c'],
                hover_data=['F√∂rvaltning']
            )
            fig.update_layout(
                xaxis_tickangle=-45,
                height=600,
                showlegend=True,
                xaxis_title="Arbetsplats",
                yaxis_title="Antal ombud"
            )
            st.plotly_chart(fig, key="bar_ombud_per_arbetsplats")

        # Ny graf: Detaljerad j√§mf√∂relse av ombud per f√∂rvaltning
        forvaltning_ombud_data = []
        for forv in cached['forvaltningar']:
            forv_personer = [p for p in cached['personer'] if str(p.get('forvaltning_id')) == str(forv['_id'])]
            vision_count = len([p for p in forv_personer if p.get('visionombud', False)])
            skydd_count = len([p for p in forv_personer if p.get('skyddsombud', False)])
            total_arbetsplatser = len([ap for ap in cached['arbetsplatser'] 
                                     if ap.get('forvaltning_id') == forv['_id']])
            
            if vision_count > 0 or skydd_count > 0:
                forvaltning_ombud_data.append({
                    'F√∂rvaltning': forv['namn'],
                    'Visionombud': vision_count,
                    'Skyddsombud': skydd_count,
                    'Antal arbetsplatser': total_arbetsplatser,
                    'Visionombud per arbetsplats': round(vision_count / total_arbetsplatser if total_arbetsplatser > 0 else 0, 2),
                    'Skyddsombud per arbetsplats': round(skydd_count / total_arbetsplatser if total_arbetsplatser > 0 else 0, 2)
                })

        if forvaltning_ombud_data:
            df = pd.DataFrame(forvaltning_ombud_data)
            
            # Skapa tv√• grafer: en f√∂r totala antalet och en f√∂r per arbetsplats
            col1, col2 = st.columns(2)
            
            with col1:
                fig1 = px.bar(
                    df,
                    x='F√∂rvaltning',
                    y=['Visionombud', 'Skyddsombud'],
                    title="Totalt antal ombud per f√∂rvaltning",
                    barmode='group',
                    color_discrete_sequence=['#2ecc71', '#e74c3c']
                )
                fig1.update_layout(
                    xaxis_tickangle=-45,
                    height=400,
                    showlegend=True,
                    xaxis_title="F√∂rvaltning",
                    yaxis_title="Antal ombud"
                )
                st.plotly_chart(fig1, key="bar_total_ombud_per_forv")
            
            with col2:
                fig2 = px.bar(
                    df,
                    x='F√∂rvaltning',
                    y=['Visionombud per arbetsplats', 'Skyddsombud per arbetsplats'],
                    title="Genomsnittligt antal ombud per arbetsplats och f√∂rvaltning",
                    barmode='group',
                    color_discrete_sequence=['#2ecc71', '#e74c3c']
                )
                fig2.update_layout(
                    xaxis_tickangle=-45,
                    height=400,
                    showlegend=True,
                    xaxis_title="F√∂rvaltning",
                    yaxis_title="Genomsnittligt antal ombud per arbetsplats"
                )
                st.plotly_chart(fig2, key="bar_ombud_per_arbetsplats_forv")

        # Skapa j√§mf√∂relsediagram f√∂r medlemmar och ombud per f√∂rvaltning
        comparison_data = []
        for forv in cached['forvaltningar']:
            members = forv.get('beraknat_medlemsantal', 0)
            if members > 0:
                forv_personer = [p for p in cached['personer'] if str(p.get('forvaltning_id')) == str(forv['_id'])]
                vision_count = len([p for p in forv_personer if p.get('visionombud', False)])
                skydd_count = len([p for p in forv_personer if p.get('skyddsombud', False)])
                
                comparison_data.append({
                    'F√∂rvaltning': forv['namn'],
                    'Medlemmar per Visionombud': round(members / vision_count if vision_count > 0 else 0, 1),
                    'Medlemmar per Skyddsombud': round(members / skydd_count if skydd_count > 0 else 0, 1)
                })

        if comparison_data:
            df = pd.DataFrame(comparison_data)
            fig = px.bar(
                df,
                x='F√∂rvaltning',
                y=['Medlemmar per Visionombud', 'Medlemmar per Skyddsombud'],
                title="Medlemmar per ombud per f√∂rvaltning",
                barmode='group'
            )
            st.plotly_chart(fig, key="bar_medlemmar_per_ombud")

        # Visa t√§ckningsgrad f√∂r ombud
        st.subheader("T√§ckningsgrad f√∂r ombud")
        
        # Ber√§kna t√§ckningsgrad f√∂r arbetsplatser
        arbetsplatser_med_vision = set()
        arbetsplatser_med_skydd = set()
        
        for person in cached['personer']:
            if person.get('visionombud') and person.get('arbetsplats'):
                arbetsplatser_med_vision.update(person['arbetsplats'])
            if person.get('skyddsombud') and person.get('arbetsplats'):
                arbetsplatser_med_skydd.update(person['arbetsplats'])

        total_arbetsplatser = len(set(ap['namn'] for ap in cached['arbetsplatser']))
        
        coverage_data = [{
            'Typ': 'Arbetsplatser med Visionombud',
            'Antal': len(arbetsplatser_med_vision),
            'Procent': round(len(arbetsplatser_med_vision) / total_arbetsplatser * 100, 1)
        }, {
            'Typ': 'Arbetsplatser med Skyddsombud',
            'Antal': len(arbetsplatser_med_skydd),
            'Procent': round(len(arbetsplatser_med_skydd) / total_arbetsplatser * 100, 1)
        }, {
            'Typ': 'Arbetsplatser utan ombud',
            'Antal': total_arbetsplatser - len(arbetsplatser_med_vision.union(arbetsplatser_med_skydd)),
            'Procent': round((total_arbetsplatser - len(arbetsplatser_med_vision.union(arbetsplatser_med_skydd))) / total_arbetsplatser * 100, 1)
        }]

        df = pd.DataFrame(coverage_data)
        fig = px.bar(
            df,
            x='Typ',
            y='Procent',
            title="T√§ckningsgrad f√∂r ombud p√• arbetsplatser",
            text='Procent',
            labels={'Procent': 'Procent av arbetsplatser'}
        )
        fig.update_traces(texttemplate='%{text:.1f}%', textposition='outside')
        st.plotly_chart(fig, key="bar_tackningsgrad")

    with tab3:
        st.subheader("Ombudsstatistik")
        
        stats_tab1, stats_tab2 = st.tabs(["Visionombud", "Skyddsombud"])
        
        with stats_tab1:
            # Hj√§lpfunktion f√∂r att r√§kna Visionombud
            def count_vision_reps(personer_list, filter_func=None):
                """R√§knar antalet Visionombud baserat p√• givna filter."""
                if filter_func:
                    personer_list = [p for p in personer_list if filter_func(p)]
                return len([p for p in personer_list if p.get("visionombud", False)])

            # √ñversikt av totala antal
            st.markdown("### Total √ñversikt")
            total_members = sum(f.get('beraknat_medlemsantal', 0) for f in cached['forvaltningar'])
            total_reps = count_vision_reps(cached['personer'])
            
            # Visa totala m√§tv√§rden
            col1, col2 = st.columns(2)
            with col1:
                st.metric("Totalt antal medlemmar", total_members)
            with col2:
                st.metric("Totalt antal Visionombud", total_reps)
            
            if total_members > 0:
                st.metric("Medlemmar per Visionombud", 
                         round(total_members / total_reps if total_reps > 0 else float('inf'), 1))
            
            # Statistik per f√∂rvaltning
            st.markdown("### Per F√∂rvaltning")
            for forv in cached['forvaltningar']:
                # R√§kna ombud f√∂r denna f√∂rvaltning
                reps = count_vision_reps(cached['personer'], 
                    lambda p: str(p.get('forvaltning_id')) == str(forv['_id']))
                
                # Visa om det finns ombud eller medlemmar
                if reps > 0 or forv.get('beraknat_medlemsantal', 0) > 0:
                    with st.expander(f"{forv['namn']}"):
                        members = forv.get('beraknat_medlemsantal', 0)
                        
                        col1, col2 = st.columns(2)
                        with col1:
                            st.metric("Antal medlemmar", members)
                        with col2:
                            st.metric("Antal Visionombud", reps)
                        
                        if members > 0:
                            st.metric("Medlemmar per Visionombud", 
                                round(members / reps if reps > 0 else float('inf'), 1))
            
            # Statistik per avdelning
            st.markdown("### Per Avdelning")
            for avd in cached['avdelningar']:
                # R√§kna ombud f√∂r denna avdelning
                reps = count_vision_reps(cached['personer'], 
                    lambda p: str(p.get('avdelning_id')) == str(avd['_id']))
                
                # Visa om det finns ombud eller medlemmar
                if reps > 0 or avd.get('beraknat_medlemsantal', 0) > 0:
                    with st.expander(f"{avd['namn']} ({avd['forvaltning_namn']})"):
                        members = avd.get('beraknat_medlemsantal', 0)
                        
                        col1, col2 = st.columns(2)
                        with col1:
                            st.metric("Antal medlemmar", members)
                        with col2:
                            st.metric("Antal Visionombud", reps)
                        
                        if members > 0:
                            st.metric("Medlemmar per Visionombud", 
                                round(members / reps if reps > 0 else float('inf'), 1))
            
            # Statistik per enhet
            st.markdown("### Per Enhet")
            for enhet in cached['enheter']:
                # R√§kna ombud f√∂r denna enhet
                reps = count_vision_reps(cached['personer'], 
                    lambda p: str(p.get('enhet_id')) == str(enhet['_id']))
                
                # Visa om det finns ombud eller medlemmar
                if reps > 0 or enhet.get('beraknat_medlemsantal', 0) > 0:
                    with st.expander(f"{enhet['namn']} ({enhet['avdelning_namn']}, {enhet['forvaltning_namn']})"):
                        members = enhet.get('beraknat_medlemsantal', 0)
                        
                        col1, col2 = st.columns(2)
                        with col1:
                            st.metric("Antal medlemmar", members)
                        with col2:
                            st.metric("Antal Visionombud", reps)
                        
                        if members > 0:
                            st.metric("Medlemmar per Visionombud", 
                                round(members / reps if reps > 0 else float('inf'), 1))

        with stats_tab2:
            # Hj√§lpfunktion f√∂r att r√§kna Skyddsombud
            def count_safety_reps(personer_list, filter_func=None):
                """R√§knar antalet Skyddsombud baserat p√• givna filter."""
                if filter_func:
                    personer_list = [p for p in personer_list if filter_func(p)]
                return len([p for p in personer_list if p.get("skyddsombud", False)])

            # √ñversikt av totala antal
            st.markdown("### Total √ñversikt")
            total_members = sum(f.get('beraknat_medlemsantal', 0) for f in cached['forvaltningar'])
            total_reps = count_safety_reps(cached['personer'])
            
            # Visa totala m√§tv√§rden
            col1, col2 = st.columns(2)
            with col1:
                st.metric("Totalt antal medlemmar", total_members)
            with col2:
                st.metric("Totalt antal Skyddsombud", total_reps)
            
            if total_members > 0:
                st.metric("Medlemmar per Skyddsombud", 
                         round(total_members / total_reps if total_reps > 0 else float('inf'), 1))
            
            # Statistik per f√∂rvaltning
            st.markdown("### Per F√∂rvaltning")
            for forv in cached['forvaltningar']:
                # R√§kna ombud f√∂r denna f√∂rvaltning
                reps = count_safety_reps(cached['personer'], 
                    lambda p: str(p.get('forvaltning_id')) == str(forv['_id']))
                
                # Visa om det finns ombud eller medlemmar
                if reps > 0 or forv.get('beraknat_medlemsantal', 0) > 0:
                    with st.expander(f"{forv['namn']}"):
                        members = forv.get('beraknat_medlemsantal', 0)
                        
                        col1, col2 = st.columns(2)
                        with col1:
                            st.metric("Antal medlemmar", members)
                        with col2:
                            st.metric("Antal Skyddsombud", reps)
                        
                        if members > 0:
                            st.metric("Medlemmar per Skyddsombud", 
                                round(members / reps if reps > 0 else float('inf'), 1))
            
            # Statistik per avdelning
            st.markdown("### Per Avdelning")
            for avd in cached['avdelningar']:
                # R√§kna ombud f√∂r denna avdelning
                reps = count_safety_reps(cached['personer'], 
                    lambda p: str(p.get('avdelning_id')) == str(avd['_id']))
                
                # Visa om det finns ombud eller medlemmar
                if reps > 0 or avd.get('beraknat_medlemsantal', 0) > 0:
                    with st.expander(f"{avd['namn']} ({avd['forvaltning_namn']})"):
                        members = avd.get('beraknat_medlemsantal', 0)
                        
                        col1, col2 = st.columns(2)
                        with col1:
                            st.metric("Antal medlemmar", members)
                        with col2:
                            st.metric("Antal Skyddsombud", reps)
                        
                        if members > 0:
                            st.metric("Medlemmar per Skyddsombud", 
                                round(members / reps if reps > 0 else float('inf'), 1))
            
            # Statistik per enhet
            st.markdown("### Per Enhet")
            for enhet in cached['enheter']:
                # R√§kna ombud f√∂r denna enhet
                reps = count_safety_reps(cached['personer'], 
                    lambda p: str(p.get('enhet_id')) == str(enhet['_id']))
                
                # Visa om det finns ombud eller medlemmar
                if reps > 0 or enhet.get('beraknat_medlemsantal', 0) > 0:
                    with st.expander(f"{enhet['namn']} ({enhet['avdelning_namn']}, {enhet['forvaltning_namn']})"):
                        members = enhet.get('beraknat_medlemsantal', 0)
                        
                        col1, col2 = st.columns(2)
                        with col1:
                            st.metric("Antal medlemmar", members)
                        with col2:
                            st.metric("Antal Skyddsombud", reps)
                        
                        if members > 0:
                            st.metric("Medlemmar per Skyddsombud", 
                                round(members / reps if reps > 0 else float('inf'), 1))

    with tab4:
        st.subheader("Geografisk √ñversikt")
        
        # Ladda och visa kartan
        arbetsplatser = cached['arbetsplatser']
        personer = cached['personer']
        
        # Knapp f√∂r att ladda om kartan
        col1, col2 = st.columns([1, 4])
        with col1:
            if st.button("üîÑ Ladda om kartan"):
                # Rensa cache f√∂r kartan
                load_map.clear()
                st.rerun()
        
        # Visa statistik om arbetsplatser p√• kartan
        with col2:
            total_arbetsplatser = len(arbetsplatser)
            arbetsplatser_med_koordinater = len([ap for ap in arbetsplatser if ap.get('coordinates')])
            st.info(f"Visar {arbetsplatser_med_koordinater} av {total_arbetsplatser} arbetsplatser p√• kartan")
        
        # Visa kartan med arbetsplatser och ombud
        karta, failed_locations = load_map(arbetsplatser, personer, db)
        folium_static(karta)

        # Visa eventuella platser som saknar koordinater
        st.markdown("### Arbetsplatser som saknar koordinater")
        saknar_koordinater = [ap['namn'] for ap in arbetsplatser if not ap.get('coordinates')]
        
        if saknar_koordinater:
            col1, col2 = st.columns([1, 4])
            with col1:
                # Knapp f√∂r att generera koordinater
                if st.button("üåç Generera koordinater"):
                    with st.spinner('Genererar koordinater...'):
                        updated, failed = generate_missing_coordinates(db, arbetsplatser)
                        if updated > 0:
                            st.success(f"‚úÖ Genererade koordinater f√∂r {updated} arbetsplatser!")
                            if failed > 0:
                                st.warning(f"‚ö†Ô∏è Kunde inte generera koordinater f√∂r {failed} arbetsplatser")
                            # Uppdatera cachen och ladda om sidan
                            update_cache_after_change(db, 'arbetsplatser', 'update')
                            # Rensa cache f√∂r kartan
                            load_map.clear()
                            st.rerun()
                        else:
                            st.error("‚ùå Kunde inte generera n√•gra koordinater")
            
            with col2:
                for plats in saknar_koordinater:
                    st.warning(f"‚ö†Ô∏è {plats}")
        else:
            st.success("‚úÖ Alla arbetsplatser har koordinater")

        # Visa eventuella fel vid kartgenerering
        if failed_locations:
            st.markdown("### Problem vid kartgenerering")
            for error in failed_locations:
                st.error(f"‚ùå {error}")
